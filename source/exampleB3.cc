//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file example_compton.cc
/// \brief Main program of the compton example

#include "G4RunManager.hh"
#include "G4UImanager.hh"

#include "Randomize.hh"

#include "UserDetectorConstruction.hh"
#include "UserPhysicsList.hh"
#include "UserPrimaryGeneratorAction.hh"
#include "UserRunAction.hh"
#include "UserEventAction.hh"
#include "UserStackingAction.hh"
#include "G4Timer.hh" //yy
#include <time.h> //yy

#ifdef G4VIS_USE
#include "G4VisExecutive.hh"
#endif

#ifdef G4UI_USE
#include "G4UIExecutive.hh"
#endif

#include <iostream>
#include <fstream>
std::ofstream ofs;
std::ofstream ofs2;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

int main(int argc,char** argv)
{
  G4cout << "[debug] main.cc"  << G4endl;
  // [yy] timer start -- real elapsed time 
  G4Timer* theTimer = new G4Timer(); //yy
  theTimer->Start(); //yy

  // Choose the Random engine
  //
  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine);

  // [yy] random seeds generated by current time 2016-1-26 (Attention! This should be put after random engine)

  long seed = time(NULL);
  CLHEP::HepRandom::setTheSeed(seed);    //[yy] for measurement
  //CLHEP::HepRandom::setTheSeed(1464155893); //[yy] for check

  G4cout << "[debug] random seed : " << seed << G4endl; // random seed check yy 2016-1-26

  std::ofstream ofs3("random_seed.txt");
  ofs3 << "random seed : " << "\t" << seed << std::endl;  
  ofs3.close();

  G4cout << "[debug] random seed generated: " << seed << G4endl; // random seed check yy 2016-1-26
     
  // Construct the default run manager
  //
  G4RunManager * runManager = new G4RunManager;

  // Set mandatory initialization classes
  //
  runManager->SetUserInitialization(new UserDetectorConstruction);
  //
  runManager->SetUserInitialization(new UserPhysicsList);
    
  // Set user action classes
  //
  runManager->SetUserAction(new UserPrimaryGeneratorAction);
  //
  UserRunAction* runAction = new UserRunAction();
  runManager->SetUserAction(runAction);
  //
  runManager->SetUserAction(new UserEventAction(runAction));
  //
  runManager->SetUserAction(new UserStackingAction);  
  
  // Initialize G4 kernel
  //
  runManager->Initialize();
  
#ifdef G4VIS_USE
  // Initialize visualization
  G4VisManager* visManager = new G4VisExecutive;
  // G4VisExecutive can take a verbosity argument - see /vis/verbose guidance.
  // G4VisManager* visManager = new G4VisExecutive("Quiet");
  visManager->Initialize();
#endif

  // Get the pointer to the User Interface manager
  G4UImanager* UImanager = G4UImanager::GetUIpointer();

  if (argc!=1)   // batch mode
    {
      G4String command = "/control/execute ";
      G4String fileName = argv[1];
      UImanager->ApplyCommand(command+fileName);
    }
  else
    {  // interactive mode : define UI session
#ifdef G4UI_USE
      G4UIExecutive* ui = new G4UIExecutive(argc, argv);
#ifdef G4VIS_USE
      UImanager->ApplyCommand("/control/execute init_vis.mac"); 
#else
      UImanager->ApplyCommand("/control/execute init.mac"); 
#endif
      ui->SessionStart();
      delete ui;
#endif
    }

  // Job termination
  // Free the store: user actions, physics_list and detector_description are
  // owned and deleted by the run manager, so they should not be deleted 
  // in the main() program !

#ifdef G4VIS_USE
  delete visManager;
#endif
  delete runManager;

  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo.....
